problem link; https://practice.geeksforgeeks.org/problems/d894706c496da5c5a4f45b0360c7f4164c516f83/1

code;
class Solution{
    public static int powerfullInteger(int n,int interval[][],int k)
    {
       TreeMap<Integer,Integer> tm=new TreeMap<>();
        for(int i=0;i<n;i++){
            tm.put(interval[i][0],tm.getOrDefault(interval[i][0],0)+1);
            tm.put(interval[i][1]+1,tm.getOrDefault(interval[i][1]+1,0)-1);
        }
        int temp=0;
        int ans=0;
        for(Map.Entry<Integer,Integer> e:tm.entrySet()){
            int key=e.getKey();
            int value=e.getValue();
            if(value>=0){
                temp+=value;
                if(temp>=k){
                    ans=key;
                }
            }else if(value<0){
                if(temp>=k){
                    ans=key-1;
                }
                temp+=value;
            }
        }
        return (ans==0?-1:ans);
}
}
